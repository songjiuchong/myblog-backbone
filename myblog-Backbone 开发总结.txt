对myblog-backbone的开发总结;


前端模块;

view/myblogIni.html;

定义了页面HTML源文件的架构, 主要包括<div id='element'></div>,<div class='warning' sytle='display:none'></div>和从外部加载require.js脚本这三个部分;


public/main.js;

require.js的入口文件, 在加载完requirejs的主代码后会立即加载main.js;
其中定义了对require的config(定义模块加载的默认路径等); 
加载了backbone和semantic这两个重要模块后, 设置了三个全局常量(title,description,tpl);
加载了router/router.js, 初始化了路由对象并且对路由路径开始监听;


public/router/router.js;

定义了前端路由规则:
      '':'init',
            'posts':'posts',
            'posts?author=:authorid':'posts',
            'posts?post=:postId':'posts',
            'posts/create':'posts_create',
            'posts/:postId/edit':'editPost',
            'posts/:postId/remove':'removePost',
            'comments/:commentId/remove':'removeComment',
            'signin':'signin',
            'signout':'signout',
            'signup':'signup',
            '*other':'default'

在路由规则对应的回调函数中加载了待加载视图的template模块(header部分和内容部分), 定义了如:
        require(['template/component/header','template/posts','view/blogView'],function(header,posts,blogView){
                  var tplHeader  = header.html;
                  var tplPosts  =  posts.html;
                  tpl = tplHeader + tplPosts;
                  window.App = new blogView(authorid);
              });
取出了template模块中的html文件中定义的字符串, 拼接header和内容部分的html字符串将其赋值给全局变量tpl, 然后初始化待加载的视图对象,同时传入一些关键参数给视图模块的initialize函数;


public/view/404View.js
public/view/blogView.js
public/view/createPostView.js
public/view/editPostView.js
public/view/postView.js
public/view/signinViewjs
public/view/signupView.js

public/view中保存的是各个视图模块, 以blogView.js为例:

这个模块会返回一个Backbone的View模块对象, 它的initialize方法中将使用_.template()函数将全局函数tpl转换为一个根据传入tpl定义的模板方法, 然后调用render方法;
render方法中首先会将当前视图模块对象依赖的model模块或者collection模块使用fetch方法获取保存在后端数据库中的数据, 将异步获取到的这些数据整合后传递给刚才使用_.template()函数生成的模板方法, 将整合后的数据传入这个方法,方法将返回一个根据传入数据渲染后的html模板内容, 将这段内容插入页码中的element元素, 页面渲染完成,如:

var content = App.template(finalData);
$('#element').empty().append(content);

接着执行afterRenderProcess模板返回的函数;


public/afterRenderProcess.js

afterRenderProcess模块返回一个函数, 这个函数将首先利用e.preventDefault();禁止所有<a>链接的默认行为(单页面项目不能通过a链接跳转并刷新页面), 根据a链接的href属性获取到其目标url后使用Backbone提供的router.navigate(href, true); 来让跳转的地址通过Backbone单页面路由系统来处理; 并且指定了a链接如果指向一个删除操作(删除评论或者删除文章), 那么将会弹出询问框询问用户是否继续操作, 用户确认继续才会执行删除; 
接着, 指定了表单中submit按钮的行为: 取消默认跳转行为, 用户点击后前端来验证表单中各个项的有效性, 如果全部符合发送请求的格式要求则通过Ajax发送表单请求, 一旦Ajax请求响应成功则使用router.navigate()跳转到某个指定的url; 
需要注意的是, 这里表单submit按钮对应的提交请求其实可以不以submit的形式请求, 而是通过类似删除评论按钮这样的方式跳转到指定url然后通过Backbone的前端路由系统(router.js)来发送Ajax请求更好, 因为这样的设计才是高内聚的;
最后设置延时清除掉成功、失败提示信息的代码和semantic框架需要对指定元素行为设置的js代码;


public/css/style.css
public/img/……

项目的css样式文件和保存的用户注册头像图片;


public/deps/backbone-min.js
public/deps/jquery.min.js
public/deps/r.js
public/deps/semantic.min.js
public/deps/underscore-min.js

项目的依赖库;


public/model/blogComment.js
public/model/blogPost.js
public/model/blogUser.js

model模块中主要指定了获取指定model内容的url, 如:
return Backbone.Model.extend({
      url:'/getPost',
      initialize:function(postId){
            if(postId){
                this.url = this.url + '?' + 'postId=' + postId;
            }
          }
         // defaults:{
         //   author:'',
         //   title:'',
         //   content:'',
         //   pv:0
         // }
  });


public/collection/blogCollection.js
public/collection/commentCollection.js

collection模块中主要指定了获取指定collection内容的url, 如:
return Backbone.Collection.extend({
          url:'/getPosts',
          model:blogPost,
          initialize:function(authorid){
            if(authorid){
                this.url = this.url + '?' + authorid;
            }
          }
  });


public/template/404.js
public/template/createPost.js
public/template/editPost.js
public/template/post.js
public/template/posts.js
public/template/signin.js
public/template/signup.js
public/template/component/header.js

主要指定了需要用到的template模板的内容, 使用对象的形式保存(模仿app-content-content,使用khaki来实现), 如:
define([],function(){
  return {"html":"<div class='errorPage'>This is a 404 myblog page!</div>"}

})



后端模块;

index.js;

初始化了node express框架;
指定了需要的所有中间件, 数据库的设置;


router/index.js;

后端路由文件, 主要用来接收和处理Ajax请求, 如果请求不符合任何Ajax请求的路径并且未设置,发送任何响应header就默认是获取项目的主页面’/posts’, 返回主页面.html文件给浏览器:
app.use(function (req, res, next) {
      if (!res.headersSent) {
          var clientui = require('fs').readFileSync('views/myblogIni.html');          
          res.writeHead(200,{'Content-Type':'text/html;charset=utf-8;'}); //注意, 如果这里不添加charset=utf-8响应, 页面会显示中文乱码;
          res.write(clientui);
          res.end();
          return next();
      }
  })


lib/mongo.js

MongoDB的初始化设置, 并且初始化了User, Post, Comment 三张主表;


models/comments.js
models/posts.js
models/users.js

定义了三张主表的对应查询方法, 如:

const User = require('../lib/mongo').User

module.exports = {
  // 注册一个用户
  create: function create (user) {
    return User.create(user).exec()
  },

  // 通过用户名获取用户信息
  getUserByName: function getUserByName (name) {
    return User
      .findOne({ name: name })
      .addCreatedAt()
      .exec()
  }
}



TODO:
1.在myblog-backbone中直接加载页面: http://localhost:3000/posts/create 会报错:Unexpected token < 并且无法加载main.js, 
这可能是由于requirejs加载main.js的地址为: "http://localhost:3000/posts/main.js" 从而找不到这个文件而导致的, 原因是当前页面的地址在/posts后又添加了子路径/create, 如果没有子路径或者只使用’?…’query字符串的形式就不会有这个问题; 
参考: https://stackoverflow.com/questions/19682610/requirejs-does-not-follow-relative-path-for-data-main-with-baseurl-set

2.在点击链接时某些时刻可能会出现: Error: Can't set headers after they are sent 这样的后端报错, 这可能与node的版本有关, 也可能是因为在调用next()方法前没有使用return;
参考: https://cnodejs.org/topic/53774ffecbcc396349ca1155

3.目前此项目的架构在一定程度上还存在用户验证问题, 因为通过Backbone的前端路由无论访问哪个页面的渲染过程都是: 根据地址栏路径匹配Backbone.Router对象实例中配置的路由, 在匹配路由对应的处理函数中获取待访问页面相关template中的html内容放入全局变量tpl中, 初始化相应的view对象, 使用_.template函数将全局变量tpl做为参数生成对应的模板, 将模板所需的数据通过相关的model/collection模块fetch到客户端, 将异步获取的数据整合到一个对象中并传入模板渲染页面; 一般情况下这样是没有问题的, 因为模板基本都会根据传入的数据对象中是否有user信息来判断应该如何渲染用户在登录/未登录情况下显示不同内容的部分, 除了如: 编辑文章, 创建文章等页面的文章部分缺少了这样的验证, 也就是说无论用户是否处于登录状态都会显示创建/编辑文章的部分, 这显然是存在问题的; 但是由于编辑/创建文章的按钮本身在渲染时存在逻辑会判断模板数据中的user属性是否为空, 只有登录状态下的用户才能看到这两个按钮; 但是还可能存在这样的特殊情况: 用户不通过按钮而是直接在地址栏输入创建/编辑文章页面的url, 这样就会出现问题; 又或者用户在登录状态下进入了文章页面, 所以可以点击编辑/创建文章的按钮, 但是由于在页面中停留了过长的时间导致cookie过期, 那么此时再去点击按钮也会引发问题; 包括用户在登录状态下进入了编辑/创建文章的页面, 但是在点击提交按钮前由于cookie已经过期所以提交时已经不处于登录状态这样的问题;
其实, 每一个view模块中都会新建一个blogUser对象(model模块), 然后向服务器的'/userKeyInfo'发送请求来fetch用户相关的信息, 这样在render模板时就能将用户信息做为数据传入, 后端的这个API并不会判断当前用户请求的cookie中是否包含了登录信息, 而是直接将req.session.user(Express的express-session插件会处理请求中的cookie)赋值给reqJson.user然后返回给浏览器, 也就是说浏览器很可能接收一个空的user对象, 然后将其作为数据render模板, 前端的template中会去根据传入数据中user属性是否为空来渲染登录/非登录状态下的页面内容; 所以说后端的这个验证用户登录状态的API是没有问题的, 关键需要在前端某个环节中添加拦截验证(后面会提到);

而在之前使用Nodejs+ejs模板的非单页面项目中由于设置了middlewares/check.js这个中间件, 任何需要权限的Ajax请求都需要通过类似:
// GET /posts/create 发表文章页
router.get('/create', checkLogin, function (req, res, next) {
  res.render('create')
})

这样的方式来判断用户当前是否已经登录, 如果没有登录就会被强制跳转并在模板中添加错误信息:

check.js;
......
checkLogin: function checkLogin (req, res, next) {
    if (!req.session.user) {
      req.flash('error', '未登录')
      return res.redirect('/signin')
    }
    next()
  }
......

通过这种方式, 之前的这个非单页面项目可以很方便的验证用户访问某个页面的权限, 并加以控制;

那么回到Backbone的这个项目中, 最好的改进用户验证的方式就是在myblog-backbone/public/router/router.js中统一设置一个通过Ajax验证当前用户是否已经登录的拦截方法, 在每一次前端路由触发时就对需要权限控制的路由先进行验证, 如果通过才能继续创建视图对象, 如果没有通过就跳转到登录页面; 如果是那些可以同时以登录/非登录状态访问的页面那就直接通过并创建视图对象, 因为视图对象的创建过程中本身还存在利用blogUser对象获取用户登录信息再渲染页面的步骤; 并且通过这样的方式也可以避免用户在登录状态下cookie过期但仍旧可以请求那些需要登录验证的地址;


4.在myblog-Backbone这个项目中, 在服务器端使用的connect-flash中间件是无用的(middlewares文件夹中的check.js自定义中间件也无须再使用), 是之前开发的nodejs+ejs非单页面myblog项目中遗留下来的, 由于之前这个项目的视图模板在服务器端生成, nodejs的Express中通过传值给app.locals能直接让ejs模板拿到定义的数据, 所以使用了:

app.use(function (req, res, next) {
  res.locals.user = req.session.user
  res.locals.success = req.flash('success').toString()
  res.locals.error = req.flash('error').toString()
  next()
})

这样的中间件在每次服务器接收请求后会将上一次请求时通过: req.flash('success', '删除文章成功') 这种形式在flash中保存的值取出:
通过req.flash('success') 这样的方法取出的值会自动被删除了, 然后把值传递给res.locals, 从而在ejs模板中使用; 也就是说取出flash中保存的值比在其中设置值要晚一次请求, 这是由于这个项目设置的flash都是成功/报错信息, 都是在页面重定向后显示在新页面中的信息, 所以需要在下一次请求后放到ejs模板中再响应给浏览器显示;
而在Backbone这个项目中, 在routes/index.js中存在大量类似:

req.flash('error', e.message);
reqJson = {error:e.message};
res.writeHead(200,{'Content-Type':'application/json;charset=utf-8;'});
res.write(JSON.stringify(reqJson));
res.end();

这样的代码, 这显然也是有问题的, 其实只需要reqJson = {error:e.message};这句就行了, 设置req.flash会扰乱下一次请求时blogUser模块对象fetch后取得的返回数据, 因为
'/userKeyInfo' API返回: 

reqJson.user = res.locals.user;
reqJson.success = res.locals.success;
reqJson.error = res.locals.error;
res.writeHead(200,{'Content-Type':'application/json;charset=utf-8;'});
res.write(JSON.stringify(reqJson));
res.end();

而之前在中间件中:
app.use(function (req, res, next) {
  res.locals.user = req.session.user
  res.locals.success = req.flash('success').toString()
  res.locals.error = req.flash('error').toString()
  next()
})

所以blogUser返回的success和error也是有问题的, 需要删除'/userKeyInfo' API返回的这两个属性;

总的来说, 就是需要删除Backbone项目中所有与flash中间件有关的代码, 并且res.locals相关的使用也不需要了;



